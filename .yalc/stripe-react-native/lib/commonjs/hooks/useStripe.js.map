{"version":3,"sources":["useStripe.tsx"],"names":["APPLE_PAY_NOT_SUPPORTED_MESSAGE","useStripe","isApplePaySupported","setApplePaySupported","checkApplePaySupport","isSupported","isiOS","StripeSdk","createPaymentMethod","data","options","paymentMethod","NativeStripeSdk","error","undefined","retrievePaymentIntent","clientSecret","paymentIntent","confirmPaymentMethod","paymentIntentClientSecret","presentApplePay","params","code","ApplePayError","Canceled","message","confirmApplePayPayment","handleCardAction","confirmSetupIntent","setupIntent","confirmPayment"],"mappings":"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","sourcesContent":["import {\n  CreatePaymentMethod,\n  PaymentMethod,\n  StripeError,\n  CreatePaymentMethodError,\n  PaymentIntent,\n  ConfirmPaymentError,\n  RetrievePaymentIntentError,\n  ApplePayError,\n  CardActionError,\n  SetupIntent,\n  ConfirmSetupIntentError,\n  ApplePay,\n} from '../types';\nimport { useEffect, useState } from 'react';\nimport { isiOS, createError } from '../helpers';\nimport NativeStripeSdk from '../NativeStripeSdk';\nimport StripeSdk from '../NativeStripeSdk';\n\nconst APPLE_PAY_NOT_SUPPORTED_MESSAGE =\n  'Apple pay is not supported on this device';\n\n/**\n * useStripe hook\n */\nexport function useStripe() {\n  const [isApplePaySupported, setApplePaySupported] = useState(false);\n\n  useEffect(() => {\n    async function checkApplePaySupport() {\n      const isSupported = isiOS ?? (await StripeSdk.isApplePaySupported());\n      setApplePaySupported(isSupported);\n    }\n\n    checkApplePaySupport();\n  }, []);\n\n  const createPaymentMethod = async (\n    data: CreatePaymentMethod.Params,\n    options: CreatePaymentMethod.Options = {}\n  ): Promise<{\n    paymentMethod?: PaymentMethod;\n    error?: StripeError<CreatePaymentMethodError>;\n  }> => {\n    try {\n      const paymentMethod = await NativeStripeSdk.createPaymentMethod(\n        data,\n        options\n      );\n      return {\n        paymentMethod,\n        error: undefined,\n      };\n    } catch (error) {\n      return {\n        paymentMethod: undefined,\n        error: createError(error),\n      };\n    }\n  };\n\n  const retrievePaymentIntent = async (\n    clientSecret: string\n  ): Promise<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError<RetrievePaymentIntentError>;\n  }> => {\n    try {\n      const paymentIntent = await NativeStripeSdk.retrievePaymentIntent(\n        clientSecret\n      );\n      return {\n        paymentIntent,\n        error: undefined,\n      };\n    } catch (error) {\n      return {\n        paymentIntent: undefined,\n        error: createError(error),\n      };\n    }\n  };\n\n  const confirmPaymentMethod = async (\n    paymentIntentClientSecret: string,\n    data: CreatePaymentMethod.Params,\n    options: CreatePaymentMethod.Options\n  ): Promise<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError<ConfirmPaymentError>;\n  }> => {\n    try {\n      const paymentIntent = await NativeStripeSdk.confirmPaymentMethod(\n        paymentIntentClientSecret,\n        data,\n        options\n      );\n      return {\n        paymentIntent,\n        error: undefined,\n      };\n    } catch (error) {\n      return {\n        paymentIntent: undefined,\n        error: createError(error),\n      };\n    }\n  };\n\n  const presentApplePay = async (\n    params: ApplePay.PresentParams\n  ): Promise<{ error?: StripeError<ApplePayError> }> => {\n    if (!isApplePaySupported) {\n      return {\n        error: {\n          code: ApplePayError.Canceled,\n          message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n        },\n      };\n    }\n\n    try {\n      await NativeStripeSdk.presentApplePay(params);\n\n      return {\n        error: undefined,\n      };\n    } catch (error) {\n      return {\n        error: createError(error),\n      };\n    }\n  };\n\n  const confirmApplePayPayment = async (\n    clientSecret: string\n  ): Promise<{ error?: StripeError<ApplePayError> }> => {\n    if (!isApplePaySupported) {\n      return {\n        error: {\n          code: ApplePayError.Canceled,\n          message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n        },\n      };\n    }\n    try {\n      await NativeStripeSdk.confirmApplePayPayment(clientSecret);\n      return {\n        error: undefined,\n      };\n    } catch (error) {\n      return {\n        error: createError(error),\n      };\n    }\n  };\n\n  const handleCardAction = async (\n    paymentIntentClientSecret: string\n  ): Promise<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError<CardActionError>;\n  }> => {\n    try {\n      const paymentIntent = await NativeStripeSdk.handleCardAction(\n        paymentIntentClientSecret\n      );\n      return {\n        paymentIntent,\n        error: undefined,\n      };\n    } catch (error) {\n      return {\n        error: createError(error),\n        paymentIntent: undefined,\n      };\n    }\n  };\n\n  const confirmSetupIntent = async (\n    paymentIntentClientSecret: string,\n    data: CreatePaymentMethod.Params,\n    options: CreatePaymentMethod.Options\n  ): Promise<{\n    setupIntent?: SetupIntent;\n    error?: StripeError<ConfirmSetupIntentError>;\n  }> => {\n    try {\n      const setupIntent = await NativeStripeSdk.confirmSetupIntent(\n        paymentIntentClientSecret,\n        data,\n        options\n      );\n\n      return {\n        setupIntent,\n        error: undefined,\n      };\n    } catch (error) {\n      return {\n        error: createError(error),\n        setupIntent: undefined,\n      };\n    }\n  };\n\n  return {\n    retrievePaymentIntent: retrievePaymentIntent,\n    confirmPayment: confirmPaymentMethod,\n    createPaymentMethod: createPaymentMethod,\n    handleCardAction: handleCardAction,\n    isApplePaySupported: isApplePaySupported,\n    presentApplePay: presentApplePay,\n    confirmApplePayPayment: confirmApplePayPayment,\n    confirmSetupIntent: confirmSetupIntent,\n  };\n}\n"]}