{"version":3,"sources":["useStripe.tsx"],"names":["ApplePayError","useEffect","useState","isiOS","createError","NativeStripeSdk","StripeSdk","APPLE_PAY_NOT_SUPPORTED_MESSAGE","useStripe","isApplePaySupported","setApplePaySupported","checkApplePaySupport","isSupported","createPaymentMethod","data","options","paymentMethod","error","undefined","retrievePaymentIntent","clientSecret","paymentIntent","confirmPaymentMethod","paymentIntentClientSecret","presentApplePay","params","code","Canceled","message","confirmApplePayPayment","handleCardAction","confirmSetupIntent","setupIntent","confirmPayment"],"mappings":"AAAA,SAQEA,aARF,QAaO,UAbP;AAcA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,KAAT,EAAgBC,WAAhB,QAAmC,YAAnC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAEA,MAAMC,+BAA+B,GACnC,2CADF;AAGA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,GAAqB;AAC1B,QAAM,CAACC,mBAAD,EAAsBC,oBAAtB,IAA8CR,QAAQ,CAAC,KAAD,CAA5D;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeU,oBAAf,GAAsC;AACpC,YAAMC,WAAW,GAAGT,KAAH,aAAGA,KAAH,cAAGA,KAAH,GAAa,MAAMG,SAAS,CAACG,mBAAV,EAApC;AACAC,MAAAA,oBAAoB,CAACE,WAAD,CAApB;AACD;;AAEDD,IAAAA,oBAAoB;AACrB,GAPQ,EAON,EAPM,CAAT;;AASA,QAAME,mBAAmB,GAAG,OAC1BC,IAD0B,EAE1BC,OAAoC,GAAG,EAFb,KAMtB;AACJ,QAAI;AACF,YAAMC,aAAa,GAAG,MAAMX,eAAe,CAACQ,mBAAhB,CAC1BC,IAD0B,EAE1BC,OAF0B,CAA5B;AAIA,aAAO;AACLC,QAAAA,aADK;AAELC,QAAAA,KAAK,EAAEC;AAFF,OAAP;AAID,KATD,CASE,OAAOD,KAAP,EAAc;AACd,aAAO;AACLD,QAAAA,aAAa,EAAEE,SADV;AAELD,QAAAA,KAAK,EAAEb,WAAW,CAACa,KAAD;AAFb,OAAP;AAID;AACF,GAtBD;;AAwBA,QAAME,qBAAqB,GAAG,OAC5BC,YAD4B,KAKxB;AACJ,QAAI;AACF,YAAMC,aAAa,GAAG,MAAMhB,eAAe,CAACc,qBAAhB,CAC1BC,YAD0B,CAA5B;AAGA,aAAO;AACLC,QAAAA,aADK;AAELJ,QAAAA,KAAK,EAAEC;AAFF,OAAP;AAID,KARD,CAQE,OAAOD,KAAP,EAAc;AACd,aAAO;AACLI,QAAAA,aAAa,EAAEH,SADV;AAELD,QAAAA,KAAK,EAAEb,WAAW,CAACa,KAAD;AAFb,OAAP;AAID;AACF,GApBD;;AAsBA,QAAMK,oBAAoB,GAAG,OAC3BC,yBAD2B,EAE3BT,IAF2B,EAG3BC,OAH2B,KAOvB;AACJ,QAAI;AACF,YAAMM,aAAa,GAAG,MAAMhB,eAAe,CAACiB,oBAAhB,CAC1BC,yBAD0B,EAE1BT,IAF0B,EAG1BC,OAH0B,CAA5B;AAKA,aAAO;AACLM,QAAAA,aADK;AAELJ,QAAAA,KAAK,EAAEC;AAFF,OAAP;AAID,KAVD,CAUE,OAAOD,KAAP,EAAc;AACd,aAAO;AACLI,QAAAA,aAAa,EAAEH,SADV;AAELD,QAAAA,KAAK,EAAEb,WAAW,CAACa,KAAD;AAFb,OAAP;AAID;AACF,GAxBD;;AA0BA,QAAMO,eAAe,GAAG,OACtBC,MADsB,KAE8B;AACpD,QAAI,CAAChB,mBAAL,EAA0B;AACxB,aAAO;AACLQ,QAAAA,KAAK,EAAE;AACLS,UAAAA,IAAI,EAAE1B,aAAa,CAAC2B,QADf;AAELC,UAAAA,OAAO,EAAErB;AAFJ;AADF,OAAP;AAMD;;AAED,QAAI;AACF,YAAMF,eAAe,CAACmB,eAAhB,CAAgCC,MAAhC,CAAN;AAEA,aAAO;AACLR,QAAAA,KAAK,EAAEC;AADF,OAAP;AAGD,KAND,CAME,OAAOD,KAAP,EAAc;AACd,aAAO;AACLA,QAAAA,KAAK,EAAEb,WAAW,CAACa,KAAD;AADb,OAAP;AAGD;AACF,GAvBD;;AAyBA,QAAMY,sBAAsB,GAAG,OAC7BT,YAD6B,KAEuB;AACpD,QAAI,CAACX,mBAAL,EAA0B;AACxB,aAAO;AACLQ,QAAAA,KAAK,EAAE;AACLS,UAAAA,IAAI,EAAE1B,aAAa,CAAC2B,QADf;AAELC,UAAAA,OAAO,EAAErB;AAFJ;AADF,OAAP;AAMD;;AACD,QAAI;AACF,YAAMF,eAAe,CAACwB,sBAAhB,CAAuCT,YAAvC,CAAN;AACA,aAAO;AACLH,QAAAA,KAAK,EAAEC;AADF,OAAP;AAGD,KALD,CAKE,OAAOD,KAAP,EAAc;AACd,aAAO;AACLA,QAAAA,KAAK,EAAEb,WAAW,CAACa,KAAD;AADb,OAAP;AAGD;AACF,GArBD;;AAuBA,QAAMa,gBAAgB,GAAG,OACvBP,yBADuB,KAKnB;AACJ,QAAI;AACF,YAAMF,aAAa,GAAG,MAAMhB,eAAe,CAACyB,gBAAhB,CAC1BP,yBAD0B,CAA5B;AAGA,aAAO;AACLF,QAAAA,aADK;AAELJ,QAAAA,KAAK,EAAEC;AAFF,OAAP;AAID,KARD,CAQE,OAAOD,KAAP,EAAc;AACd,aAAO;AACLA,QAAAA,KAAK,EAAEb,WAAW,CAACa,KAAD,CADb;AAELI,QAAAA,aAAa,EAAEH;AAFV,OAAP;AAID;AACF,GApBD;;AAsBA,QAAMa,kBAAkB,GAAG,OACzBR,yBADyB,EAEzBT,IAFyB,EAGzBC,OAHyB,KAOrB;AACJ,QAAI;AACF,YAAMiB,WAAW,GAAG,MAAM3B,eAAe,CAAC0B,kBAAhB,CACxBR,yBADwB,EAExBT,IAFwB,EAGxBC,OAHwB,CAA1B;AAMA,aAAO;AACLiB,QAAAA,WADK;AAELf,QAAAA,KAAK,EAAEC;AAFF,OAAP;AAID,KAXD,CAWE,OAAOD,KAAP,EAAc;AACd,aAAO;AACLA,QAAAA,KAAK,EAAEb,WAAW,CAACa,KAAD,CADb;AAELe,QAAAA,WAAW,EAAEd;AAFR,OAAP;AAID;AACF,GAzBD;;AA2BA,SAAO;AACLC,IAAAA,qBAAqB,EAAEA,qBADlB;AAELc,IAAAA,cAAc,EAAEX,oBAFX;AAGLT,IAAAA,mBAAmB,EAAEA,mBAHhB;AAILiB,IAAAA,gBAAgB,EAAEA,gBAJb;AAKLrB,IAAAA,mBAAmB,EAAEA,mBALhB;AAMLe,IAAAA,eAAe,EAAEA,eANZ;AAOLK,IAAAA,sBAAsB,EAAEA,sBAPnB;AAQLE,IAAAA,kBAAkB,EAAEA;AARf,GAAP;AAUD","sourcesContent":["import {\n  CreatePaymentMethod,\n  PaymentMethod,\n  StripeError,\n  CreatePaymentMethodError,\n  PaymentIntent,\n  ConfirmPaymentError,\n  RetrievePaymentIntentError,\n  ApplePayError,\n  CardActionError,\n  SetupIntent,\n  ConfirmSetupIntentError,\n  ApplePay,\n} from '../types';\nimport { useEffect, useState } from 'react';\nimport { isiOS, createError } from '../helpers';\nimport NativeStripeSdk from '../NativeStripeSdk';\nimport StripeSdk from '../NativeStripeSdk';\n\nconst APPLE_PAY_NOT_SUPPORTED_MESSAGE =\n  'Apple pay is not supported on this device';\n\n/**\n * useStripe hook\n */\nexport function useStripe() {\n  const [isApplePaySupported, setApplePaySupported] = useState(false);\n\n  useEffect(() => {\n    async function checkApplePaySupport() {\n      const isSupported = isiOS ?? (await StripeSdk.isApplePaySupported());\n      setApplePaySupported(isSupported);\n    }\n\n    checkApplePaySupport();\n  }, []);\n\n  const createPaymentMethod = async (\n    data: CreatePaymentMethod.Params,\n    options: CreatePaymentMethod.Options = {}\n  ): Promise<{\n    paymentMethod?: PaymentMethod;\n    error?: StripeError<CreatePaymentMethodError>;\n  }> => {\n    try {\n      const paymentMethod = await NativeStripeSdk.createPaymentMethod(\n        data,\n        options\n      );\n      return {\n        paymentMethod,\n        error: undefined,\n      };\n    } catch (error) {\n      return {\n        paymentMethod: undefined,\n        error: createError(error),\n      };\n    }\n  };\n\n  const retrievePaymentIntent = async (\n    clientSecret: string\n  ): Promise<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError<RetrievePaymentIntentError>;\n  }> => {\n    try {\n      const paymentIntent = await NativeStripeSdk.retrievePaymentIntent(\n        clientSecret\n      );\n      return {\n        paymentIntent,\n        error: undefined,\n      };\n    } catch (error) {\n      return {\n        paymentIntent: undefined,\n        error: createError(error),\n      };\n    }\n  };\n\n  const confirmPaymentMethod = async (\n    paymentIntentClientSecret: string,\n    data: CreatePaymentMethod.Params,\n    options: CreatePaymentMethod.Options\n  ): Promise<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError<ConfirmPaymentError>;\n  }> => {\n    try {\n      const paymentIntent = await NativeStripeSdk.confirmPaymentMethod(\n        paymentIntentClientSecret,\n        data,\n        options\n      );\n      return {\n        paymentIntent,\n        error: undefined,\n      };\n    } catch (error) {\n      return {\n        paymentIntent: undefined,\n        error: createError(error),\n      };\n    }\n  };\n\n  const presentApplePay = async (\n    params: ApplePay.PresentParams\n  ): Promise<{ error?: StripeError<ApplePayError> }> => {\n    if (!isApplePaySupported) {\n      return {\n        error: {\n          code: ApplePayError.Canceled,\n          message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n        },\n      };\n    }\n\n    try {\n      await NativeStripeSdk.presentApplePay(params);\n\n      return {\n        error: undefined,\n      };\n    } catch (error) {\n      return {\n        error: createError(error),\n      };\n    }\n  };\n\n  const confirmApplePayPayment = async (\n    clientSecret: string\n  ): Promise<{ error?: StripeError<ApplePayError> }> => {\n    if (!isApplePaySupported) {\n      return {\n        error: {\n          code: ApplePayError.Canceled,\n          message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n        },\n      };\n    }\n    try {\n      await NativeStripeSdk.confirmApplePayPayment(clientSecret);\n      return {\n        error: undefined,\n      };\n    } catch (error) {\n      return {\n        error: createError(error),\n      };\n    }\n  };\n\n  const handleCardAction = async (\n    paymentIntentClientSecret: string\n  ): Promise<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError<CardActionError>;\n  }> => {\n    try {\n      const paymentIntent = await NativeStripeSdk.handleCardAction(\n        paymentIntentClientSecret\n      );\n      return {\n        paymentIntent,\n        error: undefined,\n      };\n    } catch (error) {\n      return {\n        error: createError(error),\n        paymentIntent: undefined,\n      };\n    }\n  };\n\n  const confirmSetupIntent = async (\n    paymentIntentClientSecret: string,\n    data: CreatePaymentMethod.Params,\n    options: CreatePaymentMethod.Options\n  ): Promise<{\n    setupIntent?: SetupIntent;\n    error?: StripeError<ConfirmSetupIntentError>;\n  }> => {\n    try {\n      const setupIntent = await NativeStripeSdk.confirmSetupIntent(\n        paymentIntentClientSecret,\n        data,\n        options\n      );\n\n      return {\n        setupIntent,\n        error: undefined,\n      };\n    } catch (error) {\n      return {\n        error: createError(error),\n        setupIntent: undefined,\n      };\n    }\n  };\n\n  return {\n    retrievePaymentIntent: retrievePaymentIntent,\n    confirmPayment: confirmPaymentMethod,\n    createPaymentMethod: createPaymentMethod,\n    handleCardAction: handleCardAction,\n    isApplePaySupported: isApplePaySupported,\n    presentApplePay: presentApplePay,\n    confirmApplePayPayment: confirmApplePayPayment,\n    confirmSetupIntent: confirmSetupIntent,\n  };\n}\n"]}